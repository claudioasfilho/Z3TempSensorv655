// This file is generated by Simplicity Studio.  Please do not edit manually.
//
//

// This file contains the tokens for attributes stored in flash


// Identifier tags for tokens
// Creator for attribute: measured value, endpoint: 1
#define CREATOR_TEMP_MEASURED_VALUE_1 0xB000
#define NVM3KEY_TEMP_MEASURED_VALUE_1 ( NVM3KEY_DOMAIN_ZIGBEE | 0xB000 )
// Creator for attribute: min measured value, endpoint: 1
#define CREATOR_TEMP_MIN_MEASURED_VALUE_1 0xB001
#define NVM3KEY_TEMP_MIN_MEASURED_VALUE_1 ( NVM3KEY_DOMAIN_ZIGBEE | 0xB001 )
// Creator for attribute: max measured value, endpoint: 1
#define CREATOR_TEMP_MAX_MEASURED_VALUE_1 0xB002
#define NVM3KEY_TEMP_MAX_MEASURED_VALUE_1 ( NVM3KEY_DOMAIN_ZIGBEE | 0xB002 )
// Creator for attribute: cluster revision, endpoint: 1
#define CREATOR_TEMP_MEASUREMENT_CLUSTER_CLUSTER_REVISION_SERVER_1 0xB003
#define NVM3KEY_TEMP_MEASUREMENT_CLUSTER_CLUSTER_REVISION_SERVER_1 ( NVM3KEY_DOMAIN_ZIGBEE | 0xB003 )


// Types for the tokens
#ifdef DEFINETYPES
typedef int16_t  tokType_temp_measured_value;
typedef int16_t  tokType_temp_min_measured_value;
typedef int16_t  tokType_temp_max_measured_value;
typedef uint16_t  tokType_temp_measurement_cluster_cluster_revision_server;
#endif // DEFINETYPES


// Actual token definitions
#ifdef DEFINETOKENS
DEFINE_BASIC_TOKEN(TEMP_MEASURED_VALUE_1, tokType_temp_measured_value, 0x0000)
DEFINE_BASIC_TOKEN(TEMP_MIN_MEASURED_VALUE_1, tokType_temp_min_measured_value, 0x0000L)
DEFINE_BASIC_TOKEN(TEMP_MAX_MEASURED_VALUE_1, tokType_temp_max_measured_value, 0x0000L)
DEFINE_BASIC_TOKEN(TEMP_MEASUREMENT_CLUSTER_CLUSTER_REVISION_SERVER_1, tokType_temp_measurement_cluster_cluster_revision_server, 0x0001)
#endif // DEFINETOKENS


// Macro snippet that loads all the attributes from tokens
#define GENERATED_TOKEN_LOADER(endpoint) do {\
  uint8_t ptr[2]; \
  uint8_t curNetwork = emberGetCurrentNetwork(); \
  uint8_t epNetwork; \
  epNetwork = emberAfNetworkIndexFromEndpoint(1); \
  if((endpoint) == 1 || ((endpoint) == EMBER_BROADCAST_ENDPOINT && epNetwork == curNetwork)) { \
    halCommonGetToken((tokType_temp_measured_value *)ptr, TOKEN_TEMP_MEASURED_VALUE_1); \
    emberAfWriteServerAttribute(1, ZCL_TEMP_MEASUREMENT_CLUSTER_ID, ZCL_TEMP_MEASURED_VALUE_ATTRIBUTE_ID, (uint8_t*)ptr, ZCL_INT16S_ATTRIBUTE_TYPE); \
    halCommonGetToken((tokType_temp_min_measured_value *)ptr, TOKEN_TEMP_MIN_MEASURED_VALUE_1); \
    emberAfWriteServerAttribute(1, ZCL_TEMP_MEASUREMENT_CLUSTER_ID, ZCL_TEMP_MIN_MEASURED_VALUE_ATTRIBUTE_ID, (uint8_t*)ptr, ZCL_INT16S_ATTRIBUTE_TYPE); \
    halCommonGetToken((tokType_temp_max_measured_value *)ptr, TOKEN_TEMP_MAX_MEASURED_VALUE_1); \
    emberAfWriteServerAttribute(1, ZCL_TEMP_MEASUREMENT_CLUSTER_ID, ZCL_TEMP_MAX_MEASURED_VALUE_ATTRIBUTE_ID, (uint8_t*)ptr, ZCL_INT16S_ATTRIBUTE_TYPE); \
    halCommonGetToken((tokType_temp_measurement_cluster_cluster_revision_server *)ptr, TOKEN_TEMP_MEASUREMENT_CLUSTER_CLUSTER_REVISION_SERVER_1); \
    emberAfWriteServerAttribute(1, ZCL_TEMP_MEASUREMENT_CLUSTER_ID, ZCL_TEMP_MEASUREMENT_CLUSTER_CLUSTER_REVISION_SERVER_ATTRIBUTE_ID, (uint8_t*)ptr, ZCL_INT16U_ATTRIBUTE_TYPE); \
  } \
} while(false)


// Macro snippet that saves the attribute to token
#define GENERATED_TOKEN_SAVER do {\
  uint8_t allZeroData[2]; \
  MEMSET(allZeroData, 0, 2); \
  if ( data == NULL ) data = allZeroData; \
  if ( endpoint == 1 ) { \
    if ( clusterId == 0x0402 ) { \
      if ( metadata->attributeId == 0x0000 && 0x0000 == emberAfGetMfgCode(metadata) &&!emberAfAttributeIsClient(metadata) ) \
        halCommonSetToken(TOKEN_TEMP_MEASURED_VALUE_1, data); \
      if ( metadata->attributeId == 0x0001 && 0x0000 == emberAfGetMfgCode(metadata) &&!emberAfAttributeIsClient(metadata) ) \
        halCommonSetToken(TOKEN_TEMP_MIN_MEASURED_VALUE_1, data); \
      if ( metadata->attributeId == 0x0002 && 0x0000 == emberAfGetMfgCode(metadata) &&!emberAfAttributeIsClient(metadata) ) \
        halCommonSetToken(TOKEN_TEMP_MAX_MEASURED_VALUE_1, data); \
      if ( metadata->attributeId == 0xFFFD && 0x0000 == emberAfGetMfgCode(metadata) &&!emberAfAttributeIsClient(metadata) ) \
        halCommonSetToken(TOKEN_TEMP_MEASUREMENT_CLUSTER_CLUSTER_REVISION_SERVER_1, data); \
    } \
  } \
} while(false)


